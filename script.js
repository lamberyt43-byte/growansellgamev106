let money = parseInt(localStorage.getItem("money")) || 20;
let slots = parseInt(localStorage.getItem("slots")) || 3;
let watering = parseInt(localStorage.getItem("watering")) || 0;
let garden = JSON.parse(localStorage.getItem("garden")) || [];
let displayedMoney = money;
let bestMoney = parseInt(localStorage.getItem("bestMoney")) || 0;
let rouletteSpinsToday =
  parseInt(localStorage.getItem("rouletteSpinsToday")) || 0;
let lastRouletteDate = localStorage.getItem("lastRouletteDate") || "";
let currentPlotSkin = localStorage.getItem("currentPlotSkin") || "default";
let stats = { planted: 0, harvested: 0, earned: 0 };

function updateStatsUI() {
  document.getElementById("statsPlanted").textContent = stats.planted;
  document.getElementById("statsHarvested").textContent = stats.harvested;
  document.getElementById("statsEarned").textContent = stats.earned;
}

function setSkin(skin) {
  currentPlotSkin = skin;
  localStorage.setItem("currentPlotSkin", currentPlotSkin);
  updateUI();
}


const music = document.getElementById("backgroundMusic");

// –í–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É
music.play();

// –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É
music.pause();

const maxSlots = 500; // –º–∞–∫—Å–∏–º—É–º —Å–ª–æ—Ç–æ–≤

const seeds = [
  { name: "–õ—É–∫", emoji: "üßÖ", price: 2, growTime: 3000, rarity: "—Å—Ç–∞—Ä—Ç–æ–≤–æ–µ",  },
  { name: "–ú–æ—Ä–∫–æ–≤—å", emoji: "ü•ï", price: 4, growTime: 6000, rarity: "–æ–±—ã—á–Ω–æ–µ", favorite: false
 },
  {
    name: "–ü—Ä–∏–∑—Ä–∞—á–Ω–∞—è –∫–ª—É–±–Ω–∏–∫–∞",
    emoji: "üçì",
    price: 10,
    growTime: 10000,
    rarity: "—Ä–µ–¥–∫–æ–µ",
    favorite: false

  },
  {
    name: "–°–∞—Ö–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ",
    emoji: "üç¨",
    price: 15,
    growTime: 12000,
    rarity: "—ç–ø–∏—á–µ—Å–∫–æ–µ",
    favorite: false

  },
  {
    name: "–î–µ—Ä–µ–≤–æ –°–∞—Ç—É—Ä–Ω–∞",
    emoji: "ü™ê",
    price: 20,
    growTime: 15000,
    rarity: "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ",
    favorite: false

  },
  {
    name: "–°–≤–µ—Ç–æ—Ñ—Ä—É–∫—Ç",
    emoji: "üí°",
    price: 12,
    growTime: 9000,
    rarity: "—Ä–µ–¥–∫–æ–µ",
    favorite: false

  },
  {
    name: "–ú–µ–¥–æ–≤–∞—è —Ç—ã–∫–≤–∞",
    emoji: "üéÉ",
    price: 8,
    growTime: 7000,
    rarity: "–æ–±—ã—á–Ω–æ–µ",
    favorite: false

  },
  {
    name: "–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –º–∞–ª–∏–Ω–∞",
    emoji: "üõ∏",
    price: 18,
    growTime: 14000,
    rarity: "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ",
    favorite: false

  },
  {
    name: "–û–≥–Ω–µ–Ω–Ω–∞—è –≥—Ä—É—à–∞",
    emoji: "üî•",
    price: 9,
    growTime: 7500,
    rarity: "—Ä–µ–¥–∫–æ–µ",
    favorite: false

  },
  {
    name: "–õ–µ–¥—è–Ω–æ–π –±–∞–Ω–∞–Ω",
    emoji: "‚ùÑÔ∏è",
    price: 11,
    growTime: 8500,
    rarity: "—Ä–µ–¥–∫–æ–µ",
    favorite: false

  },
  {
    name: "–ë–ª–µ—Å—Ç—è—â–∞—è —á–µ—Ä–Ω–∏–∫–∞",
    emoji: "üîµ",
    price: 10,
    growTime: 8000,
    rarity: "—Ä–µ–¥–∫–æ–µ",
    favorite: false

  },
  {
    name: "–†–∞–¥—É–∂–Ω–æ–µ —è–±–ª–æ–∫–æ",
    emoji: "üåà",
    price: 15,
    growTime: 10000,
    rarity: "—ç–ø–∏—á–µ—Å–∫–æ–µ",
    favorite: false

  },
  {
    name: "–¢—É–º–∞–Ω–Ω–∞—è –≤–∏—à–Ω—è",
    emoji: "üå´Ô∏è",
    price: 13,
    growTime: 9500,
    rarity: "—Ä–µ–¥–∫–æ–µ",
    favorite: false

  },
  {
    name: "–ö—Ä–∏—Å—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –ø–µ—Ä—Å–∏–∫",
    emoji: "üíé",
    price: 17,
    growTime: 13000,
    rarity: "—ç–ø–∏—á–µ—Å–∫–æ–µ",
    favorite: false

  },
  {
    name: "–ì—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –∞—Ä–±—É–∑",
    emoji: "üåå",
    price: 22,
    growTime: 16000,
    rarity: "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ",
    favorite: false

  },
  {
    name: "–ó–≤—ë–∑–¥–Ω–∞—è –¥—ã–Ω—è",
    emoji: "‚≠ê",
    price: 16,
    growTime: 11000,
    rarity: "—ç–ø–∏—á–µ—Å–∫–æ–µ",
    favorite: false

  },
  {
    name: "–ö–æ–∫–∞-—Ñ—Ä—É–∫—Ç",
    emoji: "ü•§",
    price: 12,
    growTime: 8700,
    rarity: "—Ä–µ–¥–∫–æ–µ",
    favorite: false

  },
  {
    name: "–§—Ä—É–∫—Ç –Ω–æ—á–∏",
    emoji: "üåö",
    price: 14,
    growTime: 9000,
    rarity: "—Ä–µ–¥–∫–æ–µ",
    favorite: false

  },
  {
    name: "–¢–æ–∫—Å–∏—á–Ω—ã–π –ª–∏–º–æ–Ω",
    emoji: "‚ò£Ô∏è",
    price: 8,
    growTime: 6000,
    rarity: "–Ω–µ–æ–±—ã—á–Ω–æ–µ",
    favorite: false

  },
  {
    name: "–ë–∞–Ω–∞–Ω-—Ä–∞–∫–µ—Ç–∞",
    emoji: "üöÄ",
    price: 19,
    growTime: 14000,
    rarity: "—ç–ø–∏—á–µ—Å–∫–æ–µ",
    favorite: false

  },
  {
    name: "–ñ–≤–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ",
    emoji: "ü´ß",
    price: 20,
    growTime: 15000,
    rarity: "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ",
    favorite: false

  },
  {
    name: "–ú–æ–ª–Ω–∏–µ–≤—ã–π –∞–ø–µ–ª—å—Å–∏–Ω",
    emoji: "‚ö°",
    price: 15,
    growTime: 10000,
    rarity: "—ç–ø–∏—á–µ—Å–∫–æ–µ",
    favorite: false

  },
  {
    name: "–õ–∞–∑–µ—Ä–Ω–∞—è —Å–ª–∏–≤–∞",
    emoji: "üî¥",
    price: 13,
    growTime: 9700,
    rarity: "—Ä–µ–¥–∫–æ–µ",
    favorite: false

  },
  {
    name: "–¢–∞–Ω—Ü—É—é—â–∏–π –∞–Ω–∞–Ω–∞—Å",
    emoji: "üíÉüçç",
    price: 11,
    growTime: 9200,
    rarity: "–Ω–µ–æ–±—ã—á–Ω–æ–µ",
    favorite: false

  },
  {
    name: "–ú–∞–≥–∏—á–µ—Å–∫–∞—è –º—è—Ç–∞",
    emoji: "üßôüåø",
    price: 14,
    growTime: 10000,
    rarity: "—Ä–µ–¥–∫–æ–µ",
    favorite: false

  },
  {
    name: "–ö–∞—Ä–∞–º–µ–ª—å–Ω–∞—è –º–æ—Ä–∫–æ–≤–∫–∞",
    emoji: "ü•ïüç¨",
    price: 12,
    growTime: 9000,
    rarity: "—Ä–µ–¥–∫–æ–µ",
    favorite: false

  },
  {
    name: "–°–∞—Ö–∞—Ä–Ω–∞—è —Å–≤–µ–∫–ª–∞",
    emoji: "üç≠üç†",
    price: 10,
    growTime: 8000,
    rarity: "–æ–±—ã—á–Ω–æ–µ",
    favorite: false

  },
  {
    name: "–ñ–µ–ª–µ–π–Ω—ã–π –∞—Ä–±—É–∑",
    emoji: "üçâüß°",
    price: 15,
    growTime: 10000,
    rarity: "—Ä–µ–¥–∫–æ–µ",
    favorite: false

  },
  {
    name: "–ü—É–∑—ã—Ä–∏—Å—Ç–∞—è –≤–∏—à–Ω—è",
    emoji: "üçíü´ß",
    price: 17,
    growTime: 10500,
    rarity: "—Ä–µ–¥–∫–æ–µ",
    favorite: false

  },
  {
    name: "–ü–∞–ø—Ä–∏–∫–∞-–ø—É—à–∫–∞",
    emoji: "üå∂Ô∏èüí•",
    price: 19,
    growTime: 11000,
    rarity: "—ç–ø–∏—á–µ—Å–∫–æ–µ",
    favorite: false

  },
  {
    name: "–ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω—ã–π –ª–∏–º–æ–Ω",
    emoji: "üçã‚ö°",
    price: 21,
    growTime: 11500,
    rarity: "—Ä–µ–¥–∫–æ–µ",
    favorite: false

  },
  {
    name: "–ö–ª—É–±–Ω–∏–∫–∞ —Å –Ω–µ–±–∞",
    emoji: "üçì‚òÅÔ∏è",
    price: 23,
    growTime: 12000,
    rarity: "—Ä–µ–¥–∫–æ–µ",
    favorite: false

  },
  {
    name: "–ü—ã–ª–∞—é—â–∞—è —Ç—ã–∫–≤–∞",
    emoji: "üéÉüî•",
    price: 26,
    growTime: 12500,
    rarity: "—Ä–µ–¥–∫–æ–µ",
    favorite: false

  },
  {
    name: "–Ø–≥–æ–¥–∞-—Å—Ñ–µ—Ä–∞",
    emoji: "ü´ê‚öôÔ∏è",
    price: 28,
    growTime: 13000,
    rarity: "—Ä–µ–¥–∫–æ–µ",
    favorite: false

  },
  {
    name: "–ó–≤—ë–∑–¥–Ω—ã–π –ø–æ–º–∏–¥–æ—Ä",
    emoji: "üçÖüå†",
    price: 30,
    growTime: 13500,
    rarity: "—ç–ø–∏—á–µ—Å–∫–æ–µ",
    favorite: false

  },
  {
    name: "–õ—É–Ω–Ω–∞—è –∫–ª—É–±–Ω–∏–∫–∞",
    emoji: "üçìüåô",
    price: 33,
    growTime: 14000,
    rarity: "—ç–ø–∏—á–µ—Å–∫–æ–µ",
    favorite: false

  },
  {
    name: "–ó–æ–ª–æ—Ç–æ–π –±–∞–Ω–∞–Ω",
    emoji: "üçå‚ú®",
    price: 35,
    growTime: 14500,
    rarity: "—ç–ø–∏—á–µ—Å–∫–æ–µ",
    favorite: false

  },
  {
    name: "–†–∞–¥—É–∂–Ω–∞—è —Ä–µ–¥—å–∫–∞",
    emoji: "üåÄü•ó",
    price: 38,
    growTime: 15000,
    rarity: "—ç–ø–∏—á–µ—Å–∫–æ–µ",
    favorite: false

  },
  {
    name: "–í—É–ª–∫–∞–Ω–∏—á–µ—Å–∫–∞—è –≥—Ä—É—à–∞",
    emoji: "üçêüåã",
    price: 40,
    growTime: 15500,
    rarity: "—ç–ø–∏—á–µ—Å–∫–æ–µ",
    favorite: false

  },
  {
    name: "–•—Ä—É—Å—Ç–∞–ª—å–Ω–∞—è –¥—ã–Ω—è",
    emoji: "üçàüíé",
    price: 43,
    growTime: 16000,
    rarity: "—ç–ø–∏—á–µ—Å–∫–æ–µ",
    favorite: false

  },
  {
    name: "–ê—Å—Ç—Ä–∞–ª—å–Ω—ã–π –∏–Ω–∂–∏—Ä",
    emoji: "üååüçá",
    price: 46,
    growTime: 16500,
    rarity: "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ",
    favorite: false

  },
  {
    name: "–ù–µ–æ–Ω–æ–≤—ã–π –∞–ø–µ–ª—å—Å–∏–Ω",
    emoji: "üçäüí°",
    price: 50,
    growTime: 17000,
    rarity: "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ",
    favorite: false

  },
  {
    name: "–°–≤–µ—Ç–æ—Ñ—Ä—É–∫—Ç",
    emoji: "üí°üçè",
    price: 52,
    growTime: 17500,
    rarity: "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ",
  },
  {
    name: "–°–æ–ª–Ω–µ—á–Ω—ã–π –∫–æ–∫–æ—Å",
    emoji: "ü••‚òÄÔ∏è",
    price: 55,
    growTime: 18000,
    rarity: "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ",
    favorite: false

  },
  {
    name: "–ö–æ–º–µ—Ç–Ω–æ–µ –º–∞–Ω–≥–æ",
    emoji: "ü•≠‚òÑÔ∏è",
    price: 58,
    growTime: 18500,
    rarity: "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ",
    favorite: false

  },
  {
    name: "–ü–∏–∫—Å–µ–ª—å–Ω–æ–µ —è–±–ª–æ–∫–æ",
    emoji: "üçéüü©",
    price: 60,
    growTime: 19000,
    rarity: "—ç–ø–∏—á–µ—Å–∫–æ–µ",
    favorite: false

  },
  {
    name: "–ì—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞",
    emoji: "ü•¨üåå",
    price: 65,
    growTime: 19500,
    rarity: "—ç–ø–∏—á–µ—Å–∫–æ–µ",
    favorite: false

  },
  {
    name: "–Ø–¥—Ä–æ –ø–µ—Ä—Å–∏–∫–∞",
    emoji: "üçëüîò",
    price: 68,
    growTime: 20000,
    rarity: "—ç–ø–∏—á–µ—Å–∫–æ–µ",
    favorite: false

  },
  {
    name: "–ì—Ä–æ–∑–æ–≤–æ–π –º–∞–Ω–¥–∞—Ä–∏–Ω",
    emoji: "üçäüå©Ô∏è",
    price: 70,
    growTime: 20500,
    rarity: "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ",
    favorite: false

  },
  {
    name: "–¢–∞–π–Ω–∞—è –∫–ª—É–±–Ω–∏–∫–∞",
    emoji: "üçìüïµÔ∏è",
    price: 75,
    growTime: 21000,
    rarity: "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ",
    favorite: false

  },
  {
    name: "–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –¥—ã–Ω—è",
    emoji: "üçàü™ê",
    price: 97,
    growTime: 22000,
    rarity: "–º–∏—Ñ–∏—á–µ—Å–∫–æ–µ",
    favorite: false

  },
  {
    name: "–ú–∞–≥–Ω–∏—Ç–Ω–∞—è –º–æ—Ä–∫–æ–≤–∫–∞",
    emoji: "ü•ïüß≤",
    price: 550,
    growTime: 23000,
    rarity: "–º–∏—Ñ–∏—á–µ—Å–∫–æ–µ",
    favorite: false

  },
  {
    name: "–ü–ª–æ–¥ –ø–æ—Ä—Ç–∞–ª–∞",
    emoji: "üåÄüçí",
    price: 850,
    growTime: 24000,
    rarity: "–º–∏—Ñ–∏—á–µ—Å–∫–æ–µ",
    favorite: false

  },
  {
    name: "–†–∞—Å—Ç–µ–Ω–∏–µ –≤–µ—á–Ω–æ—Å—Ç–∏",
    emoji: "‚ôæÔ∏èüåø",
    price: 999,
    growTime: 25000,
    rarity: "–ø—Ä–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–æ–µ",
    favorite: false

  },
  {
    name: "–ü—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ",
    emoji: "üå≥üëª",
    price: 78,
    growTime: 30000,
    rarity: "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ",
    favorite: false

  },
  {
    name: "–ì–æ—Ä—è—â–∞—è –≥–æ–ª—É–±–∏–∫–∞",
    emoji: "üî•ü´ê",
    price: 1500,
    growTime: 50000,
    rarity: "–ø—Ä–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–æ–µ",
    favorite: false

  },
  {
    name: "–°–ª–µ–ø–∞—è –º–∞—Ä–∞–∫—É–π—è",
    emoji: "ü•≠üëì",
    price: 2222,
    growTime: 70000,
    rarity: "–ø—Ä–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–æ–µ",
    favorite: false

  },
  {
    name: "–ö–æ—Å—Ç—è–Ω–æ–π –∞–±—Ä–∏–∫–æ—Å ",
    emoji: "ü´êü¶¥",
    price: 5000,
    growTime: 1000000,
    rarity: "–ø—Ä–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–æ–µ",
    favorite: false

  },
  {
    name: "–ù–µ–æ–Ω–æ–≤—ã–π –±–∞–Ω–∞–Ω",
    emoji: "üååüçå",
    price: 1000000,
    growTime: 10000000,
    rarity: "–ø—Ä–∏–∑–º–∞—Ç–∏—á–µ–∫–æ–µ",
    favorite: false

  },
    {
    name: "–ê—Å—Ç—Ä–∞–ª—å–Ω—ã–π –ª–æ—Ç–æ—Å",
    emoji: "üå†ü™∑",
    price:  100000000,
    growTime: 10000000,
    rarity: "–ø—Ä–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–æ–µ",
    favorite: false

  },
  { 
  name: "–ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ —Å–µ–º—è", 
  emoji: "üåå", 
  price: 230000000, 
  growTime: 60000000,  // 60 —Å–µ–∫—É–Ω–¥
  rarity: "–ø—Ä–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–æ–µ" 
},
{ 
  name: "–ú–µ–¥–æ–≤—ã–π –∫–∞–∫—Ç—É—Å", 
  emoji: "üçØüåµ", 
  price: 900000000, 
  growTime: 80000000,  // 60 —Å–µ–∫—É–Ω–¥
  rarity: "–ø—Ä–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–æ–µ" 
},
  {
    name: "–°–≤–µ—Ä—Ö–Ω–æ–≤–∞",
    emoji: "üéáüåå",
    price: 1000000000,
    growTime: 1000000000,
    rarity: "–ø—Ä–∏–∑–º–∞—Ç–∏—á–µ–∫–æ–µ",
    favorite: false

  },
];

const rarityOrder = {
  –æ–±—ã—á–Ω–æ–µ: 1,
  —Ä–µ–¥–∫–æ–µ: 2,
  —ç–ø–∏—á–µ—Å–∫–æ–µ: 3,
  –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ: 4,
  –º–∏—Ñ–∏—á–µ—Å–∫–æ–µ: 5,
};

// –°–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤
const redeemCodes = {
    // –∫–æ–¥ -> –Ω–∞–≥—Ä–∞–¥–∞
};

let usedCodes = []; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥—ã

function redeemCode() {
  const input = document.getElementById("redeemInput").value.trim().toUpperCase();
  const message = document.getElementById("redeemMessage");

  if (!input) {
    message.textContent = "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥!";
    return;
  }

  if (usedCodes.includes(input)) {
    message.textContent = "‚ö†Ô∏è –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!";
    return;
  }

  if (redeemCodes[input]) {
    money += redeemCodes[input];
    usedCodes.push(input);
    message.textContent = `‚úÖ –ö–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${redeemCodes[input]} üí∞`;
    updateMoney();
  } else {
    message.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!";
  }
}



seeds.sort((a, b) => rarityOrder[a.rarity] - rarityOrder[b.rarity]);

function save() {
  localStorage.setItem("money", money);
  localStorage.setItem("slots", slots);
  localStorage.setItem("watering", watering);
  localStorage.setItem("garden", JSON.stringify(garden));
  if (money > bestMoney) {
    bestMoney = money;
    localStorage.setItem("bestMoney", bestMoney);
  }
}

function updateUI() {
  document.getElementById("money").textContent = money;
  renderGarden();
}

function renderGarden() {
  const gardenDiv = document.getElementById("garden");
  gardenDiv.innerHTML = "";

  for (let i = 0; i < slots; i++) {
    const plot = document.createElement("div");
plot.className = "plot";
if (currentPlotSkin === "night") {
  plot.classList.add("night-skin");
}



    const plant = garden[i];
    if (plant) {
      plot.textContent = plant.emoji;
      if (!plant.ready) {
        plot.classList.add("growing");
      }
    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –ª–æ–ø–∞—Ç–∫–∏ ‚Äî –ª—é–±–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ—Ç—Å—è
if (shovelMode) {
  plot.onclick = () => removePlant(i);
  plot.innerHTML += `<div class="tooltip">–£–¥–∞–ª–∏—Ç—å (${plant.name})</div>`;
} else {
  // –ï—Å–ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ ‚Äî –º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏
  if (plant.ready) {
    plot.innerHTML += `<div class="tooltip">–ì–æ—Ç–æ–≤–æ! (${plant.name})</div>`;
    plot.onclick = () => {
      money += Math.floor(plant.price * 1.5);
      garden[i] = null;
      updateUI();
      save();
    };
  } else {
    // –ï—Å–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞
    const percent = Math.floor(((Date.now() - plant.start) / plant.time) * 100);
    plot.innerHTML += `<div class="tooltip">${plant.rarity} ‚Ä¢ ${percent}%</div>`;
  }
}

    } else {
      plot.onclick = () => plantSeed(i);
    }

    gardenDiv.appendChild(plot);
  }
}

function renderSeeds() {
  const rarityOrder = {
    –æ–±—ã—á–Ω–æ–µ: 1,
    —Ä–µ–¥–∫–æ–µ: 2,
    —ç–ø–∏—á–µ—Å–∫–æ–µ: 3,
    –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ: 4,
    –º–∏—Ñ–∏—á–µ—Å–∫–æ–µ: 5,
  };

  seeds.sort((a, b) => rarityOrder[a.rarity] - rarityOrder[b.rarity]);

  const seedButtons = document.getElementById("seedButtons");
  seedButtons.innerHTML = "";
  seeds.forEach((seed, index) => {
    const btn = document.createElement("button");
    btn.textContent = `${seed.emoji} ${seed.name} (${seed.price}üí∞)`;
    btn.onclick = () => {
      selectedSeed = index;
      toggleShop();
    };
    seedButtons.appendChild(btn);
  });
}

let selectedSeed = null;

function plantSeed(i) {
  if (selectedSeed === null) return;
  const seed = seeds[selectedSeed];
  if (money < seed.price) return;

  money -= seed.price;
  const time = seed.growTime - watering * 1000;
  garden[i] = {
    ...seed,
    start: Date.now(),
    time: time,
    ready: false,
  };

  growPlant(i);
  updateUI();
  save();
  updateQuestProgress(0, 1); // –ü–æ—Å–∞–¥–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è
}

function growPlant(i) {
  const interval = setInterval(() => {
    const plant = garden[i];
    if (!plant) return clearInterval(interval);
    if (Date.now() - plant.start >= plant.time) {
    const timePassed = Date.now() - plant.start;
const growTime = boosts.speed ? plant.time * 0.5 : plant.time; // ‚ö° –£—Å–∫–æ—Ä–∏—Ç–µ–ª—å —Ä–æ—Å—Ç–∞
if (timePassed >= growTime) {
// üé® –£–ª—É—á—à–µ–Ω–Ω—ã–µ –º—É—Ç–∞—Ü–∏–∏
let roll = Math.random();
if (roll < 0.05) { // 5% —à–∞–Ω—Å –Ω–∞ –º—É—Ç–∞—Ü–∏—é
  let type;
  if (roll < 0.03) { // 3% –æ–±—ã—á–Ω—ã–µ —Ä–µ–¥–∫–∏–µ
    type = ["silver", "gold"][Math.floor(Math.random() * 2)];
  } else if (roll < 0.049) { // 1.9% —à–∞–Ω—Å –Ω–∞ —Ä–∞–¥—É–∂–Ω–æ–µ
    type = "rainbow";
  } else { // 0.1% —Å—É–ø–µ—Ä-—Ä–µ–¥–∫–æ–µ
    type = "cosmic";
  }

  if (type === "silver") {
    plant.price *= 2;
    plant.emoji = "ü•à" + plant.emoji;
    plant.mutation = "–°–µ—Ä–µ–±—Ä—è–Ω–æ–µ üåü (√ó2 –¥–µ–Ω—å–≥–∏)";
  }
  if (type === "gold") {
    plant.price *= 5;
    plant.emoji = "ü•á" + plant.emoji;
    plant.mutation = "–ó–æ–ª–æ—Ç–æ–µ üí∞ (√ó5 –¥–µ–Ω—å–≥–∏)";
  }
  if (type === "rainbow") {
    plant.price *= 10;
    plant.emoji = "üåà" + plant.emoji;
    plant.mutation = "–†–∞–¥—É–∂–Ω–æ–µ üåà (√ó10 –¥–µ–Ω—å–≥–∏ + +50% —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞)";
    plant.growTime = Math.floor(plant.growTime * 0.5); // –±—ã—Å—Ç—Ä–µ–µ —Ä–∞—Å—Ç—ë—Ç
  }
  if (type === "cosmic") {
    plant.price *= 50;
    plant.emoji = "‚ú®" + plant.emoji;
    plant.mutation = "–ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ üöÄ (√ó50 –¥–µ–Ω—å–≥–∏ + –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç)";
    plant.ready = true; // —Å—Ä–∞–∑—É –≥–æ—Ç–æ–≤–æ
  }
}

  plant.ready = true;
  updateUI();
  save();
  clearInterval(interval);
}

    }
  }, 1000);
}

function buySlot() {
  if (slots >= maxSlots) {
    alert("–ú–∞–∫—Å–∏–º—É–º –≥—Ä—è–¥–æ–∫ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! üåæ");
    return;
  }

  if (money >= 15) {
    money -= 15;
    slots += 1;
    garden.push(null);
    updateUI();
    save();
  } else {
    alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∞–∫–∏–ª–µ–π!");
  }
}

function buyWatering() {
  if (money >= 10) {
    money -= 10;
    watering += 1;
    updateUI();
    save();
  }
}

function loadGrowth() {
  garden.forEach((plant, i) => {
    if (plant && !plant.ready) {
      growPlant(i);
    }
  });
}

let hallowCoins = parseInt(localStorage.getItem("hallowCoins")) || 0;
let guests = ["üï∑Ô∏è –ü–∞—É–∫", "üíÄ –°–∫–µ–ª–µ—Ç", "üßô‚Äç‚ôÇÔ∏è –ú–∞–≥", "üßõ‚Äç‚ôÇÔ∏è –í–∞–º–ø–∏—Ä", "üëª –ü—Ä–∏–∑—Ä–∞–∫", "ü§° –ö–ª–æ—É–Ω"];

function saveHalloween() {
  localStorage.setItem("hallowCoins", hallowCoins);
  document.getElementById("hallowCoins").textContent = hallowCoins;
}

function toggleHalloweenShop() {
  document.getElementById("halloweenShop").classList.toggle("hidden");
}

function randomGuest() {
  let guest = guests[Math.floor(Math.random() * guests.length)];
  let amount = 0;
  if (guest === "ü§° –ö–ª–æ—É–Ω") amount = 1000;
  else if (guest === "üï∑Ô∏è –ü–∞—É–∫") amount = 100;
  else amount = Math.floor(Math.random() * 150) + 50;

  hallowCoins += amount;
  saveHalloween();

  const msg = document.createElement("div");
  msg.style.position = "fixed";
  msg.style.bottom = "20px";
  msg.style.left = "50%";
  msg.style.transform = "translateX(-50%)";
  msg.style.background = "rgba(0,0,0,0.8)";
  msg.style.color = "#ffcc00";
  msg.style.padding = "12px 20px";
  msg.style.borderRadius = "10px";
  msg.style.zIndex = 9999;
  msg.textContent = `üïØÔ∏è –°–ª–∞–¥–æ—Å—Ç—å –∏–ª–∏ –≥–∞–¥–æ—Å—Ç—å! ${guest} –ø—Ä–∏–Ω—ë—Å ${amount} üëª`;
  document.body.appendChild(msg);

  setTimeout(() => msg.remove(), 4000);
}

setInterval(randomGuest, 50000);

saveHalloween();

let shovelMode = false;

function toggleShovelMode() {
  shovelMode = !shovelMode;
  const shovelButton = document.getElementById("shovelButton");
  const vignette = document.getElementById("vignette");

  shovelButton.classList.toggle("active", shovelMode);
  vignette.classList.toggle("active", shovelMode);

  // –ú–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–Ω–æ–ø–∫–∏
  shovelButton.textContent = shovelMode ? "‚ùå" : "ü™ì";

  // –≠—Ñ—Ñ–µ–∫—Ç –≤–∫–ª—é—á–µ–Ω–∏—è
  if (shovelMode) {
   
  }
}

function removePlant(index) {
  if (!garden[index]) return;
  if (confirm("–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ –±–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–Ω–µ–≥?")) {
    garden[index] = null;
    updateUI();
    save();
  }
}


function animateMoney() {
  const display = document.getElementById("money");
  if (!display) return;

  if (displayedMoney !== money) {
    displayedMoney += (money - displayedMoney) * 0.1;
    if (Math.abs(money - displayedMoney) < 0.5) {
      displayedMoney = money;
    }
    display.textContent = Math.floor(displayedMoney);
  }

  requestAnimationFrame(animateMoney);
}

function harvestAll() {
  let harvested = false;
  for (let i = 0; i < garden.length; i++) {
    const plant = garden[i];
    if (plant && plant.ready) {
     money += Math.floor(plant.price * 1.5 * getRebirthBonus());

      garden[i] = null;
      harvested = true;
    }
  }
  if (harvested) {
    updateUI();
    save();
  } else {
    alert("–ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π! üå±");
  }
  updateQuestProgress(1, 1); // –°–±–æ—Ä —É—Ä–æ–∂–∞—è
  let earned = Math.floor(plant.price * 1.5); // —Å–∫–æ–ª—å–∫–æ –∑–∞—Ä–∞–±–æ—Ç–∞–ª –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ
  money += earned; // –¥–æ–±–∞–≤–ª—è–µ–º –∫ –¥–µ–Ω—å–≥–∞–º
  updateQuestProgress(4, earned); // –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞ –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –¥–µ–Ω—å–≥–∞–º
}

function toggleShop() {
  const shop = document.getElementById("plantShop");
  shop.classList.toggle("hidden");
}

function showRecords() {
  document.getElementById("game").style.display = "none";
  document.getElementById("recordsScreen").style.display = "block";
  document.getElementById("bestMoneyDisplay").textContent = bestMoney;
}

function hideRecords() {
  document.getElementById("recordsScreen").style.display = "none";
  document.getElementById("game").style.display = "block";
}

function startRecordUpdateTimer(seconds) {
  const timerDisplay = document.getElementById("updateTime");

  function update() {
    const min = Math.floor(seconds / 60)
      .toString()
      .padStart(2, "0");
    const sec = (seconds % 60).toString().padStart(2, "0");
    timerDisplay.textContent = `${min}:${sec}`;

    if (seconds <= 0) {
      clearInterval(timerInterval);
      timerDisplay.textContent = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...";
      // –º–æ–∂–µ—à—å —Ç—É—Ç –≤—ã–∑–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —Å–∫—Ä—ã—Ç—å
    }

    seconds--;
  }

  update();

  const timerInterval = setInterval(update, 1000);
}

function spinRoulette() {
  const today = new Date().toDateString();

  // –°–±—Ä–æ—Å –µ—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
  if (lastRouletteDate !== today) {
    rouletteSpinsToday = 0;
    lastRouletteDate = today;
    localStorage.setItem("lastRouletteDate", today);
    localStorage.setItem("rouletteSpinsToday", rouletteSpinsToday);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
  if (rouletteSpinsToday >= 3) {
    alert("‚ùå –°–µ–≥–æ–¥–Ω—è –ª–∏–º–∏—Ç –ø—Ä–æ–∫—Ä—É—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω (3/3). –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞!");
    return;
  }

  if (money < 5_000) {
    alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –®–∞–∫–∏–ª–µ–π!");
    return;
  }

  money -= 5_000;
  save();
  updateUI();

  const text = document.getElementById("rouletteText");
  text.textContent = "üé≤ –†—É–ª–µ—Ç–∫–∞ –∫—Ä—É—Ç–∏—Ç—Å—è...";
  text.classList.add("shake");

  const rewards = [
    { amount: 10_000, chance: 55 },
    { amount: 50_000, chance: 50 },
    { amount: 1_000_000, chance: 35 },
    { amount: 10_000_000, chance: 20 },
    { amount: 50_000_000, chance: 10 },
    { amount: 100_000_000, chance: 7 },
    { amount: 500_000_000, chance: 5 },
    { amount: 1_000_000_000, chance: 1 },
  ];

  setTimeout(() => {
    text.classList.remove("shake");

    let roll = Math.random() * 100;
    let sum = 0;
    let reward = 0;
    for (let r of rewards) {
      sum += r.chance;
      if (roll <= sum) {
        reward = r.amount;
        break;
      }
    }

    text.textContent = `üéâ –¢—ã –≤—ã–∏–≥—Ä–∞–ª ${reward.toLocaleString()} –®–∞–∫–∏–ª–µ–π!`;
    money += reward;
    save();
    updateUI();

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    rouletteSpinsToday++;
    localStorage.setItem("rouletteSpinsToday", rouletteSpinsToday);
  }, 2000);
}

let boosts = {
  speed: false,
  money: false,
  extraSpin: 0,
};

function buyBoost(type, duration, cost) {
  if (money >= cost) {
    money -= cost;
    activateBoost(type, duration);
    save();
    updateUI();
  } else {
    alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –®–∞–∫–∏–ª–µ–π!");
  }
}

function activateBoost(type, duration) {
  if (type === "speed") {
    boosts.speed = true;
    setTimeout(() => (boosts.speed = false), duration);
    alert("‚ö° –£—Å–∫–æ—Ä–∏—Ç–µ–ª—å —Ä–æ—Å—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç!");
  }
  if (type === "extraSpin") {
    boosts.extraSpin += 1;
    alert("üé≤ –í—ã –ø–æ–ª—É—á–∏–ª–∏ +1 –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Ä—É–ª–µ—Ç–∫–∏!");
  }
}


let rebirths = parseInt(localStorage.getItem("rebirths")) || 0;

function tryRebirth() {
  if (money >= 999_000_000_000) {
    if (confirm("‚ö° –ü–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–µ! –í—Å—ë —Å–±—Ä–æ—Å–∏—Ç—Å—è, –Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–ª–∏—á–∞—Ç—Å—è.")) {
      rebirths++;
      localStorage.setItem("rebirths", rebirths);
      money = 20;
      slots = 3;
      garden = [];
      watering = 0;
      save();
      updateUI();
      alert("‚ú® –¢—ã —Å–¥–µ–ª–∞–ª –ø–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–µ! –í—Å–µ–≥–æ: " + rebirths);
    }
  } else {
    alert("‚ùå –ù—É–∂–Ω–æ 999 –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏—è!");
  }
}

// –±–æ–Ω—É—Å –¥–æ—Ö–æ–¥–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ
function getRebirthBonus(multiplier = 1) {
  return 1 + rebirths * 0.1;
}









const bgMusic = document.getElementById("bg-music");

document.addEventListener("click", () => {
  if (bgMusic.paused) {
    bgMusic.play();
  }
});

const startScreen = document.getElementById("start-screen");
const gameContainer = document.getElementById("game-container");

startScreen.addEventListener("click", () => {
  startScreen.style.display = "none";
  gameContainer.style.filter = "blur(0)";
});


function openTab(tabName) {
  let tabs = document.getElementsByClassName("tab");
  for (let i = 0; i < tabs.length; i++) {
    tabs[i].style.display = "none";
  }
  document.getElementById(tabName + "Tab").style.display = "block";
}


function closeSkinsTab() {
  // —Å–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É —Å–∫–∏–Ω–æ–≤
  document.getElementById("skinsTab").style.display = "none";
  // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞–≥–∞–∑–∏–Ω
  openTab("shop");
}


function openLuckyPack() {
  if (hallowCoins < 1000) return alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üëª!");
  hallowCoins -= 1000;
  saveHalloween();

  const screen = document.createElement("div");
  screen.style.position = "fixed";
  screen.style.inset = "0";
  screen.style.background = "rgba(0,0,0,0.9)";
  screen.style.display = "flex";
  screen.style.justifyContent = "center";
  screen.style.alignItems = "center";
  screen.style.flexDirection = "column";
  screen.style.color = "white";
  screen.style.fontSize = "24px";
  screen.style.zIndex = "10000";
  screen.textContent = "üéÅ –û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è Lucky Pack...";
  document.body.appendChild(screen);

  let reward = Math.floor(Math.random() * 20_000_000) + 5_000;
  if (Math.random() < 0.001) reward = 999_000_000_000;

  setTimeout(() => {
    money += reward;
    save();
    updateUI();
    screen.textContent = `üéâ –¢—ã –ø–æ–ª—É—á–∏–ª ${reward.toLocaleString()} üí∞`;
    setTimeout(() => screen.remove(), 3000);
  }, 2000);
}

document.addEventListener("keydown", (e) => {
  if (e.key === "M") { // –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç—å M
    money += 1000000000;
    saveGame();
    alert("üí∏ +1 –º–∏–ª–ª–∏–∞—Ä–¥ —à–∞–∫–µ–ª–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–æ!");
  }
});


animateMoney();
renderSeeds();
updateUI();
loadGrowth();
function loadAdminMessage() {
  fetch("adminMessage.json")
    .then(response => response.json())
    .then(data => {
      if (data.message && data.message.trim() !== "") {
        const msgBox = document.createElement("div");
        msgBox.style.position = "fixed";
        msgBox.style.top = "10px";
        msgBox.style.left = "50%";
        msgBox.style.transform = "translateX(-50%)";
        msgBox.style.background = "rgba(255, 215, 0, 0.9)";
        msgBox.style.color = "#000";
        msgBox.style.padding = "10px 20px";
        msgBox.style.borderRadius = "10px";
        msgBox.style.fontWeight = "bold";
        msgBox.style.zIndex = "9999";
        msgBox.style.boxShadow = "0px 2px 10px rgba(0,0,0,0.3)";
        msgBox.style.animation = "slideDown 0.5s ease-out";
        msgBox.innerText = data.message;
        document.body.appendChild(msgBox);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          msgBox.remove();
        }, 5000);
      }
    })
    .catch(err => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω-—Å–æ–æ–±—â–µ–Ω–∏—è", err));
}

// –ê–Ω–∏–º–∞—Ü–∏—è
const style = document.createElement("style");
style.innerHTML = `
@keyframes slideDown {
  from { transform: translate(-50%, -50px); opacity: 0; }
  to { transform: translate(-50%, 0); opacity: 1; }
}`;
document.head.appendChild(style);

loadAdminMessage();